-- ACCESS DATABASE QUERIES CONVERTED TO SQLITE
-- ORIGINAL QUERIES FROM MC - COPY.ACCDB CONVERTED TO SQLITE-COMPATIBLE SQL

-- 101 PAR STATS - PARAMETER STATISTICS SUMMARY
CREATE VIEW IF NOT EXISTS PAR_STATS AS
SELECT 
    PAR_ID,
    MIN(NUMERIC_VALUE) AS MIN_OF_NUMERIC_VALUE,
    AVG(NUMERIC_VALUE) AS AVG_OF_NUMERIC_VALUE,
    MAX(NUMERIC_VALUE) AS MAX_OF_NUMERIC_VALUE
FROM PAR_LIST
WHERE NUMERIC_VALUE IS NOT NULL
GROUP BY PAR_ID;

-- 102 SAMPLED PARS - PARAMETERS SELECTED FOR SAMPLING/ANALYSIS
CREATE VIEW IF NOT EXISTS SAMPLED_PARS AS
SELECT DISTINCT PAR_ID
FROM PAR_LIST
WHERE NUMERIC_VALUE IS NOT NULL
ORDER BY PAR_ID;

-- 104 PARAMETER RANGES - CALCULATE PARAMETER RANGES FOR ANALYSIS
CREATE VIEW IF NOT EXISTS PARAMETER_RANGES AS
SELECT 
    SP.PAR_ID,
    MIN(SP.ID) AS MIN_OF_ID,
    MAX(SP.ID) AS MAX_OF_ID,
    MIN(SP.PARAMETER_VALUE) AS MIN_OF_PARAMETER_VALUE,
    MAX(SP.PARAMETER_VALUE) AS MAX_OF_PARAMETER_VALUE,
    (MAX(SP.ID) - MIN(SP.ID)) AS ID_RANGE
FROM SORTED_PARAMETERS SP
INNER JOIN SAMPLED_PARS ON SP.PAR_ID = SAMPLED_PARS.PAR_ID
GROUP BY SP.PAR_ID;

-- 105 PARAMETERS WITH OFFSETS - CALCULATE PARAMETER OFFSETS FOR DISTRIBUTION ANALYSIS
CREATE VIEW IF NOT EXISTS PARAMETERS_WITH_OFFSETS AS
SELECT 
    SP.ID,
    SP.RUN_ID,
    SP.PAR_ID,
    SP.PARAMETER_VALUE,
    PR.MIN_OF_PARAMETER_VALUE,
    PR.MAX_OF_PARAMETER_VALUE,
    (SP.PARAMETER_VALUE - PR.MIN_OF_PARAMETER_VALUE) / 
    (PR.MAX_OF_PARAMETER_VALUE - PR.MIN_OF_PARAMETER_VALUE) AS OFFSET,
    PR.ID_RANGE AS RUNS
FROM SORTED_PARAMETERS SP
INNER JOIN PARAMETER_RANGES PR ON SP.PAR_ID = PR.PAR_ID;

-- 106 OBSERVED AND THEORETICAL OFFSETS - COMPARE EMPIRICAL VS THEORETICAL DISTRIBUTIONS
CREATE VIEW IF NOT EXISTS OBSERVED_AND_THEORETICAL_OFFSETS AS
SELECT 
    PWO.PAR_ID,
    PWO.RUNS,
    PWO.OFFSET / PWO.RUNS AS OBSERVED_CDF,
    PWO.OFFSET AS THEORETICAL_CDF
FROM PARAMETERS_WITH_OFFSETS PWO;

-- 107 TEST STATISTIC - CALCULATE TEST STATISTICS FOR DISTRIBUTION TESTING
CREATE VIEW IF NOT EXISTS TEST_STATISTIC AS
SELECT 
    PAR_ID,
    MAX(ABS(THEORETICAL_CDF - OBSERVED_CDF)) AS TEST,
    RUNS,
    THEORETICAL_CDF
FROM OBSERVED_AND_THEORETICAL_OFFSETS
GROUP BY PAR_ID;

-- 108 KS D STATISTIC - KOLMOGOROV-SMIRNOV D STATISTIC CALCULATION
CREATE VIEW IF NOT EXISTS KSD_STATISTIC AS
SELECT 
    TS.PAR_ID,
    TS.TEST AS D,
    TS.RUNS,
    TS.THEORETICAL_CDF,
    SQRT(TS.RUNS * TS.RUNS / (2.0 * TS.RUNS)) AS RUN_TERM,
    TS.TEST * SQRT(TS.RUNS * TS.RUNS / (2.0 * TS.RUNS)) AS X_RANGE
FROM TEST_STATISTIC TS;

-- 109 KS D STATISTIC EXTENDED - EXTENDED KS STATISTIC WITH ADDITIONAL CALCULATIONS
CREATE VIEW IF NOT EXISTS KSD_STATISTIC_EXTENDED AS
SELECT 
    KS.PAR_ID,
    KS.D,
    KS.X_RANGE,
    KS.RUN_TERM
FROM KSD_STATISTIC KS;

-- 110 KS D AND Z - KS D STATISTIC WITH Z-SCORE CALCULATION
CREATE VIEW IF NOT EXISTS KSD_AND_Z AS
SELECT 
    KSE.PAR_ID,
    KSE.D,
    KSE.X_RANGE,
    KSE.D * SQRT(KSE.RUN_TERM * KSE.RUN_TERM / (2.0 * KSE.RUN_TERM)) + 0.12 + 0.11/SQRT(KSE.RUN_TERM) AS Z
FROM KSD_STATISTIC_EXTENDED KSE;

-- 111 P_TERM1 - FIRST TERM FOR P-VALUE CALCULATION
CREATE VIEW IF NOT EXISTS P_TERM1 AS
SELECT 
    KZ.PAR_ID,
    KZ.D,
    KZ.X_RANGE,
    KZ.Z,
    EXP(-2.0 * KZ.Z * KZ.Z) AS P_TERM1
FROM KSD_AND_Z KZ;

-- 112 P_TERM2 - SECOND TERM FOR P-VALUE CALCULATION  
CREATE VIEW IF NOT EXISTS P_TERM2 AS
SELECT 
    P1.PAR_ID,
    P1.D,
    P1.X_RANGE,
    P1.Z,
    P1.P_TERM1,
    -1.0 * EXP(-2.0 * 4.0 * P1.Z * P1.Z) + P1.P_TERM1 AS P_TERM2
FROM P_TERM1 P1;

-- 113 P_TERM3 - THIRD TERM FOR P-VALUE CALCULATION
CREATE VIEW IF NOT EXISTS P_TERM3 AS
SELECT 
    P2.PAR_ID,
    P2.D,
    P2.X_RANGE,
    P2.Z,
    EXP(-18.0 * P2.Z * P2.Z) + P2.P_TERM2 AS P_TERM3
FROM P_TERM2 P2;

-- 114 KS D Z AND P - COMPLETE KS TEST RESULTS WITH P-VALUES
CREATE VIEW IF NOT EXISTS KSD_Z_AND_P AS
SELECT 
    P3.PAR_ID,
    P3.D,
    P3.X_RANGE,
    P3.Z,
    -1.0 * EXP(-32.0 * P3.Z * P3.Z) + P3.P_TERM3 AS P
FROM P_TERM3 P3;

-- 115 KS D Z AND P WITH NAMES - KS TEST RESULTS WITH PARAMETER NAMES
CREATE VIEW IF NOT EXISTS KSD_Z_AND_P_WITH_NAMES AS
SELECT 
    PN.PAR_NAME,
    KZP.PAR_ID,
    KZP.D,
    SP.MIN_OF_NUMERIC_VALUE,
    SP.MAX_OF_NUMERIC_VALUE,
    KZP.X_RANGE,
    KZP.Z,
    KZP.P
FROM KSD_Z_AND_P KZP
INNER JOIN PAR_NAMES PN ON KZP.PAR_ID = PN.PAR_ID
INNER JOIN SAMPLED_PARS SP_REF ON KZP.PAR_ID = SP_REF.PAR_ID
INNER JOIN PAR_STATS SP ON KZP.PAR_ID = SP.PAR_ID;

-- 116 STATISTICS SUMMARY - OVERALL STATISTICS SUMMARY FOR PARAMETERS
CREATE VIEW IF NOT EXISTS STATISTICS_SUMMARY AS
SELECT 
    KZPN.PAR_NAME,
    KZPN.PAR_ID,
    KZPN.P
FROM KSD_Z_AND_P_WITH_NAMES KZPN
ORDER BY KZPN.P DESC, KZPN.PAR_ID;

-- 117 PARAMETER SUMMARY TO PLOT - DATA FORMATTED FOR PLOTTING/VISUALIZATION
CREATE VIEW IF NOT EXISTS PARAMETER_SUMMARY_TO_PLOT AS
SELECT 
    SS.PAR_NAME,
    SS.PAR_ID,
    SS.P,
    KZPN.D,
    KZPN.X_RANGE,
    KZPN.Z,
    KZPN.MIN_OF_NUMERIC_VALUE,
    KZPN.MAX_OF_NUMERIC_VALUE
FROM STATISTICS_SUMMARY SS
INNER JOIN KSD_Z_AND_P_WITH_NAMES KZPN ON SS.PAR_ID = KZPN.PAR_ID
ORDER BY SS.P DESC;

-- ADDITIONAL HELPER VIEWS FOR DATA ANALYSIS

-- PARAMETER LIST WITH NAMES - JOIN PARAMETER VALUES WITH NAMES
CREATE VIEW IF NOT EXISTS PARAMETER_LIST_WITH_NAMES AS
SELECT 
    PL.RUN_ID,
    PL.PAR_ID,
    PN.PAR_NAME,
    PL.TEXT_VALUE,
    PL.NUMERIC_VALUE
FROM PAR_LIST PL
INNER JOIN PAR_NAMES PN ON PL.PAR_ID = PN.PAR_ID;

-- RESULTS SUMMARY - BASIC RESULTS SUMMARY BY REACH
CREATE VIEW IF NOT EXISTS RESULTS_SUMMARY AS
SELECT 
    REACH,
    COUNT(*) AS RECORD_COUNT,
    AVG(FLOW) AS AVG_FLOW,
    MIN(FLOW) AS MIN_FLOW,
    MAX(FLOW) AS MAX_FLOW,
    AVG(TERRESTRIAL_INPUT) AS AVG_TERRESTRIAL_INPUT
FROM RESULTS
WHERE FLOW IS NOT NULL
GROUP BY REACH;

-- COEFFICIENT SUMMARY - PERFORMANCE METRICS SUMMARY
CREATE VIEW IF NOT EXISTS COEFFICIENT_SUMMARY AS
SELECT 
    REACH,
    PARAMETER,
    AVG(R2) AS AVG_R2,
    AVG(NS) AS AVG_NS,
    AVG(RMSE) AS AVG_RMSE,
    COUNT(*) AS RUN_COUNT
FROM COEFFICIENTS
WHERE R2 IS NOT NULL
GROUP BY REACH, PARAMETER;